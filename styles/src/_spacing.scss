@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "./scss-utils/list-utils";
@use "./breakpoint";

$_spacing: (
  px: (
    1: math.div(1rem * 1, 16),
    2: math.div(1rem * 2, 16),
    4: math.div(1rem * 4, 16),
  ),
  xs: 0.5rem,
  sm: 0.75rem,
  1: 1rem,
  2: 2rem,
  3: 3rem,
  4: 4rem,
  6: 6rem,
  8: 8rem,
);

@function get($k...) {
  @return map.get($_spacing, $k...);
}

@mixin padding($args...) {
  $_n: list.length($args);
  @if $_n == 0 {
    @error "no arguments passed to `spacing.padding`";
  }
  @if $_n > 4 {
    @error "`spacing.padding` accepts up to 4 arguments, but received " + #{$n};
  }
  
  $mapped: ();
  @each $k in $args {
    $mapped: list.append($mapped, get($k));
  }
  padding: list-utils.join($mapped, " ");
}

@function section-spacing() {
  @return get(4);
}

@mixin section-padding(
  $top: null,
  $bot: null,
  $left: null,
  $right: null,
  $top-lg: $top,
  $bot-lg: $bot,
  $left-lg: $left,
  $right-lg: $right,
) {
  padding: get(4) get(2);
  @if $top != null {
    padding-top: $top;
  }
  @if $right != null {
    padding-right: $right;
  }
  @if $bot != null {
    padding-bottom: $bot;
  }
  @if $left != null {
    padding-left: $left;
  }

  @include breakpoint.min(tablet-md) {
    padding: get(4);
    @if $top-lg != null {
      padding-top: $top-lg;
    }
    @if $right-lg != null {
      padding-right: $right-lg;
    }
    @if $bot-lg != null {
      padding-bottom: $bot-lg;
    }
    @if $left-lg != null {
      padding-left: $left-lg;
    }
  }
}